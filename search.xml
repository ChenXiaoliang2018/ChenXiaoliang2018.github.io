<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ECMAScript常用方法]]></title>
    <url>%2F2018%2F12%2F30%2FECMAScript%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[数组 arr.push() 在数组末尾添加数据； 参数：需要添加的数据； 返回值： 新数组的长度； arr.pop() 删除数组的最后一项； 参数： 不需要参数； 返回值：删除的最后一项数据； arr.shift() 在数组开头添加数据； 参数：需要添加的数据； 返回值： 新数组的长度； arr.unshift() 删除数组第一项数据； 参数： 不需要参数； 返回值： 删除的的第一项数据； arr.concat() 数组合并； 参数： 需要合并的数组或者项； 返回值： 合并后的新数组； arr.slice(start, end) 数组截取； start：开始截取项的索引值，可为负值; end：结束截取项的索引值，可为负值； 返回值： 截取项组成的新数组； 当截取项索引值为负值时，末项索引值为-1，单个索引值时默认会截取到最后一项，两个索引值时需注意start&lt;end，否则只能获取一个空数组； 无论索引值正负，截取顺序都是自左向右； 负值截取案例： 注：以上方法均未修改原数组； 数组的删除，替换与插入 arr.splice(start, how many, elements) start: 数组开始删除项的索引值，该参数不可省略； how many: 数组删除，替换项的个数，如果是插入的话，该项值为0，该参数不可省略； elements： 数组替换，插入的项，当删除项时该项可以省略； 注：splice方法修改了原数组，区别于slice方法； arr.reverse() 将数组每一项颠倒; 参数： 不需要参数； 返回值： 颠倒后的数组； arr.join() 将数组合并为字符串； 参数： 合并符号； 返回值： 合并后的字符串； arr.sort() 数组的排序；不添加参数时：数组每一项将会转化为字符串，然后按照ASCII码表升序排列，基本顺序为数字，大写字母，小写字母；添加参数时： 当数组项均为数字项时，需自定义函数作为参数来决定数组的排序方式。 升序案例： 注：以上方法均改变了原数组； 字符串 str.charAt() 字符串索引值对应字符； 参数： 索引值； 返回值： 对应项； str.indexOf() 字符串该字符首次出现的索引值； 参数： 字符 返回值： 索引值，如果不包含该字符，返回-1； str.concat() 字符串合并； 参数： 被合并的字符或字符串； 返回值： 新的字符串； str.slice(start, end) 字符串截取； start： 开始截取字符的索引值； end： 结束截取字符的索引值； 返回值： 截取的字符串； str.split() 将字符串切割为数组； 参数： 字符串切割方式； 返回值： 切割后的数组； str.toLowerCase() 字符串小写； 参数： 无； 返回值： 将字符串里的大写字母转为小写； str.toUpperCase() 字符串大写； 参数： 无； 返回值： 将字符串里的小写字母转为大写； str.match() 将字符串里首次匹配到的内容转化成一个数组； 参数： 字符串或正则； 返回值： 保存匹配内容的数组； 注：match可以全局匹配； 分组的反向引用：将正则表达式匹配到的内容分组并再次使用； str.replace(/正则表达式/, function(match, $1,…$n) {}) match必须书写； 分组里的$1,..$n必须书写完全，即使函数里未使用； 快速标签案例： 正则表达式 reg.test(str) 检测字符串里是否含有满足正则的字符； 参数： 要检测的字符串； 返回值： 布尔值； reg.exac(str) 检测字符串首次满足正则的字符并输出到数组里； 参数： 被检测的字符串； 返回值： 首次匹配到的字符串所构成的数组； 该方法与字符串里的match方法功能相似，不过exac方法不能全局匹配；特殊预定义字符 \n(换行符）,\t（制表符） 检测该字符需要将字符串转为多行字符串（ES6）;字符集 将多种可能性写在中括号里，如[0-9],[a-z],[A-Z]; 0-9之间为短横而不是~；修饰符 i：字母忽略大小写； g：全局匹配；边界 ^: 开头匹配； $: 结尾匹配；单词边界与非单词边界 单词：\w(数字，字母，下划线)； 边界：字符之间的位置； 单词边界： 单词与非单词之间的边界； 非单词边界： 边界减去单词边界； 如：’this is a book’ 边界：’|t|h|i|s| |i|s| |a| |b|o|o|k|’ 单词边界： ‘|this| |is| |a| |book|’； 非单词边界： ‘t|h|i|s i|s a b|o|o|k’； 案例： 量词 {n} 出现n次； {n, m} 出现m次； 出现0次，1次或多次； 出现1次或多次； ? 出现0次或1次；预定义类 . 除回车，换行外所有字符； \w 单词（数字，字母，下划线）； \W 非单词； \d 数字； \D 非数字； \s 空格； \S 非空格；操作符 | 或操作； () 分组；匹配中文 [\u4e00-\u9fa5] 常用正则表达式合集：https://github.com/ChenXiaoliang2018/odds-and-ends/blob/master/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%90%88%E9%9B%86.docx]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于this]]></title>
    <url>%2F2018%2F12%2F29%2F%E5%85%B3%E4%BA%8Ethis%2F</url>
    <content type="text"><![CDATA[前言this作为一个函数的关键字，在不同的情况下调用函数，this就代表着不同的值，一下就对this的常见调用进行了总结； 纯粹的函数调用 此时this指向window对象； 对象的方法调用 此时this指向该对象； 构造函数的实例调用 此时this指向实例； call，apply调用 此时this指向call修改的对象； 总结实际上，this总是指向函数调用时的环境对象； 详细介绍：http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html this原理：http://www.ruanyifeng.com/blog/2018/06/javascript-this.html]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ECMAScript3.0补充]]></title>
    <url>%2F2018%2F12%2F29%2FECMAScript3.0%E8%A1%A5%E5%85%85%2F</url>
    <content type="text"><![CDATA[window与document window指窗口，包含许多对窗口相关的属性与方法； document指文档，包含许多对于文档操作的属性与方法； window通常被省略，文档具体指html元素； Math对象Math是js内置对象，提供以下api： Math.random(); 随即产生[0, 1)之间的随机数； Math.floor(); 向下取整； Math.ceil(); 向上取整； Math.round(); 四舍五入取整； Math.max(); 获取一组数据里的最大值； Math.min(); 获取一组数据里的最小值； Math.pow(底数，指数)； 指数； Math.sqrt(); 开方； Math.PI; π newnew一个函数获取对象的过程中究竟发生了什么？ 创建一个新对象； 将构造函数的作用于赋给新对象（修改this指向）； 执行构造函数中的代码（为这个对象添加属性）； 返回新对象； arguments,callee与callerarguments arguments是函数执行时产生的一个类数组对象； 用于保存实参； arguments不能使用数组的方法，但可以遍历，也拥有length属性； 利用arguments.length可以模拟函数重载现象； callee callee是arguments的一个属性，它的值为正在执行的函数对象； arguments.callee.length表示该函数形参的个数； caller caller是函数的一个属性，表示调用该函数的函数对象； 与闭包区别是，闭包还需要内层函数引用外部变量； 如果没有函数调用该函数，则属性值为null； 案例： 栈与堆 栈里保存的是值类型数据与保存地址值的指针； 堆里保存的是引用数据类型的数据； 案例： arguments详解：https://www.cnblogs.com/giggle/p/5280812.html javascript奥林匹克：https://github.com/ChenXiaoliang2018/odds-and-ends/blob/master/javacript%E5%A5%A5%E6%9E%97%E5%8C%B9%E5%85%8B.docx]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于原型]]></title>
    <url>%2F2018%2F12%2F28%2F%E5%85%B3%E4%BA%8E%E5%8E%9F%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[写在前面 每个函数都有prototype属性（显式原型），默认指向一个空对象； 该空对象（原型对象）的constructor属性指向函数本身； 每个实例对象都有__proto__属性（隐式原型），且该属性对应其构造函数的prototype属性，即fun.__proto__ == Fun.prototype; 图片解释 实例的隐式原型指向该构造函数的显式原型； 构造函数的prototype默认指向空对象，可以看作是ES内置构造函数Object的实例； o1,o2也是Object的实例； ES内置构造函数Object的prototype同样指向一个空对象，即null； ES内置函数Function的prototype也指向一个空对象，可以看作是Object的实例； ES内置函数Object也可以看作是内置函数Funciton的实例，即Object.proto == Function.prototype; ES内置函数Function可以看作是自身的实例，即Function.proto == Function.prototype; 构造函数Foo也是ES内置函数Function的实例，即任意函数都可以看作是Function的实例；]]></content>
  </entry>
  <entry>
    <title><![CDATA[ECMAScript3.0总结]]></title>
    <url>%2F2018%2F12%2F27%2FECMAScript3.0%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[js引入 js的引入依赖&lt;script&gt;标签，少量的js直接书写在标签内，js文件则通过src属性引入。 因为浏览器自上而下渲染，为了让页面更快的加载，通常将&lt;script&gt;便签放在文档最后，&lt;/body&gt;之前； 变量的声明与赋值声明规则 由数字，字母，下划线组成，且不能以数字开头； 不得与关键字，保留字冲突； 变量声明的提升 js预解析时，会全局查看是否有变量声明语句，如果有，会将其提升到到&lt;script&gt;内部最前面； 变量赋值语句并不会提升，仍然留在原位置； 案例：等效于： 数据类型分类 基本数据类型：number，string，boolean，null，undefined； 引用数据类型：object； null与undefined null表示一个空对象的指针，所以console.log(typeof null)的结果是object，null也常用来初始化保存数据为对象的变量； undefined指未初始化的变量，即该变量被声明而未被赋值； string与number的类型转换 string&gt;&gt;number: parseInt(‘’) 或 +string; number&gt;&gt;string: number + ‘’; 运算符数学运算符 +，-，*，/，%(取余)； 在进行数学运算时，数据会发生隐式转换； 加号进行数学运算，还会字符拼接； 注： 0/0的结果为NaN 比较运算符 ,&gt;=,&lt;,&lt;=等； 比较运算的结果一定是布尔值； ==与===的区别在于后者不仅会比较数值，还会比较数据类型； ！=与！==通常通过==，===来获取结果； 字符串比较是通过比较首字母在ASCII码表上的顺序来获取结果的； 注： NaN == NaN 结果为false； 3&gt;2&gt;1 结果为false； 逻辑运算符 ！，&amp;&amp;，|| 逻辑元算符的结果不一定为布尔值； 隐式转换： 非0数字，非空字符串将会转化为真； 短路语法： 只看第一项 a &amp;&amp; b：a为真，结果为b，a为假则结果为a，而不是假； a || b：a为真，结果为a，而不是真，a为假，则结果为b； 赋值运算符 ++，–，+=，-=，= ++a： 参与运算时先自加，然后再运算； a++： 参与运算时先运算，然后再自加； 无论是a++还是++a，只要对a再次操作，都取a自加后的值； 总结综合运算时，先运算贴身符号，如！，++，总体上按照数比逻的顺序运算，过程中逻辑运算符按照非与或的顺序计算。 综合运算： 流程语句条件语句if语句 语法：if(条件) {} 或 if(条件){}else{} 当条件为真时，执行方括号里的内容； 如果条件时一个表达式，会先运算该表达式的布尔值，再决定是否执行方括号里的内容，特别是表达式为a&amp;&amp;b形式的时候，并不能实现条件的嵌套； 跳楼现象：无论有几个条件（else if），最终都只会满足一个条件，并执行一条内容； 三元运算符 语法： 条件？ 值1：值2； 当条件为真时，取值1，为假时取值2； 适用于二选一的情况； switch语句 语法： switch(条件) {case 值1： 语句1；case 值2： 语句2；…default: 语句n；}； 适用于条件运算的结果有多种的情况； 条件运算的结果应当注意与值1，值n的数据类型保持一致； 每一条执行语句后都必须添加break，default可以省略break； default为以上情况都不满足，执行语句n，可以省略break； 循环语句for语句 语法： for(初始值；限定条件；步长) {循环体}； 执行流程：初始值-&gt;限定条件-&gt;循环体-&gt;步长-&gt;限定条件-&gt;循环体…直到循环变量不满足限定条件结束循环； 循环变量为全局变量（由var声明）； for循环的结构很灵活； do while语句 语法： do{循环体}while(限定条件) 当循环变量满足限定条件时，执行循环体； 后测试循环语句，至少执行一次； while语句 语法：while(限定条件) {循环体} 可以和for循环相互转换； 前测试循环语句； 注：break与continue break：结束当前层的循环，是终止该层循环，不能结束外层循环，如果想结束外层循环，需要给外层添加标签； continue：结束当前层的的该次循环，是跳过这次循环，进行下次循环，并不能结束该层循环，同样需要给外层添加标签来实现控制外层循环； 这两个语句都没有简化代码的书写，不过大大减少了浏览器计算的次数，提升了性能； continue体验：https://github.com/ChenXiaoliang2018/odds-and-ends/blob/master/1000%E4%BB%A5%E5%86%85%E6%89%80%E6%9C%89%E7%9A%84%E8%B4%A8%E6%95%B0%EF%BC%88continue%E4%BC%98%E5%8C%96%EF%BC%89.html 函数函数的声明与提升函数的声明有两种方式： function关键字：function sum() {}; 函数表达式： var sum = function() {}; js预解析时会查看全局所有的变量，利用function关键字定义的函数实际是一个引用变量，所以会整体的提升到&lt;script&gt;内部的最前面，而利用函数表达式定义的函数仅仅会将该函数名提升到最前面，函数体不会得到提升； 闭包产生条件当外部函数嵌套内部函数，并且内部函数引用了外部变量时，就产生了闭包； 闭包是什么闭包实际上是包含了引用变量以及内部函数结构的对象。 闭包有什么作用 改变了局部变量的生命周期； 能够在函数外部操作函数内部的变量； 案例：]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[圣杯与双飞翼布局]]></title>
    <url>%2F2018%2F12%2F27%2F%E5%9C%A3%E6%9D%AF%E4%B8%8E%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[特点 三列布局，两边宽度定宽，中间宽度自适应； 中间栏在浏览器中优先渲染 起源&emsp;&emsp;圣杯布局是由Kevin Cornell提出的一个布局观念，在国内最早由淘宝UED流传开来，也叫双飞翼布局； 圣杯布局&emsp;&emsp;圣杯布局首先利用浮动实现三栏并排，然后利用margin负值分别让左右两栏去到各自的位置，也遮盖住了中间栏的内容，于是想利用父级容器的padding给两侧留出位置，但会发现左右两栏也被挤到中间栏里，于是利用相对定位将两栏移到各自位置就实现了两边定宽，中间自适应的布局，因为形似圣杯，所以也叫圣杯布局。 双飞翼布局&emsp;&emsp;双飞翼布局首先也利用用浮动实现三栏并排，不同的是给中间栏加上一层容器，然后利用中间栏的margin给两侧留出合适的宽度，最后左右两栏利用margin负值移动到左右两侧，实现两侧定宽，中间自适应的三栏布局，比圣杯布局也更加的简洁。 总结 margin负值是实现两种布局的核心； html结构中需要将中间栏放在最前，既可以浮动到最前面，也可以使浏览器优先渲染； 圣杯布局：https://github.com/ChenXiaoliang2018/odds-and-ends/blob/master/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80.html 双飞翼布局：https://github.com/ChenXiaoliang2018/odds-and-ends/blob/master/%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80.html 详细介绍：https://www.cnblogs.com/woodk/p/5147085.html]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[html5知识总结]]></title>
    <url>%2F2018%2F12%2F26%2Fhtml5%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[新增语义化标签 新添加的标签更加语义化，如header，nav，section(区域)，aside，article，footer等 表单元素新属性 placeholder: 占位符； autofocus: 自动获取焦点； required： 必填项； 更多的输入类型如email，tel，number等； 一等公民video与audio src： 资源路径； controls： 控制条； autoplay： 自动播放； loop： 循环播放； 本地存储h5新增了localStorage对象，用于本地存储； Api setItem(key, value) 用于存储数据； getItem(key) 用于取出数据； removeItem(key) 用于删除某个数据； clear() 用于删除全部数据； 注： localStorage保存数据的格式为字符串，所以存储数据时应当转化为字符串格式，取出数据时应当将字符串格式转为相应格式； sessionStorage与localStorage类似，只不过localStorage生命周期是永久，而sessionStorage在重启浏览器后会清除数据；]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css3.0知识总结]]></title>
    <url>%2F2018%2F12%2F26%2Fcss3.0%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[选择器属性选择器 方括号为标识符，配合$,^等匹配符号 [src$=’.html’] 选中了src属性以.html结尾的元素； 儿子序选择器 选择器关心的是儿子中的第几个，而不关心类型； :first-child 选中了儿子里的第一个元素； p:first-of-type 选中了儿子里的第一个元素，且该元素必须为p元素，可能无法选中； :nth-child(n) 选中了儿子里的第n个元素； 儿子类型序选择器该选择器必须指明类型，所以通常以交集形式出现； p:first-of-type 选中了儿子里的第一个p元素； p:nth-of-type(n) 选中了儿子里的第n个p元素； 伪元素特性 ::after,::before为子级元素； 伪元素默认为行内元素，如需设置宽高，则需要转块或定位； 不要忘记添加content: ‘’; 伪元素可以用来添加小icon，内墙法清浮动，设置蒙板； 圆角 border-radius: 3px/3%; 与border类似非常灵活，可以用像素值，百分数；有单值，四值法；还可以单独设置某个角的圆角； 阴影 box-shadow: 5px 5px 5px rgba(0, 0, 0, .5); 分别是右偏移量，下偏移量，模糊半径，阴影颜色； 添加inset可以设置内阴影； text-shadow：5px 5px 5px rgba(0, 0, 0, .5)； 参数同上，不过没有内阴影； background拓展 background-origin: content-box; 背景图的起源为内容区，而不是padding区域； background-clip： content-box; 背景图在padding区域的图片将会被裁剪掉； background-size: 像素/百分比/contain/cover; 其中contain(容纳)，cover(覆盖)均不改变背景图比例； background-image: -webkit-linear-gradient(top, red, blue); 背景渐变，top：渐变起始位置，red：渐变起始颜色，blue：渐变终止颜色； 变形2D变形 transform: skew(10deg, 10deg) 斜切 transform: scale(2) 放大到2倍 transform: rotate(90deg) 绕中心顺时针旋转90度； transform: translate(100px, 200px) 水平方向平移100px，垂直方向平移200px; 等效于transform: translateX(100px) translateY(200px); 不等效于transform: translateX(100px); transform: translateY(200px); transform-origin: left top; 用于设置旋转中心位置； backface-visibility: hidden; 用于设置图片背面是否可见； 3D变形 transform-style: preserve-3d;要想观察到子元素的3d效果，需要给父元素添加该属性； 在3d变形的过程中，坐标轴也是不断在变化的，x轴水平向右，y轴垂直向下，z轴垂直于该平面； transform: rotateX(90deg) rotateY(90deg);routateZ相当于2D平面里的旋转； perspective: 100px; 景深，用于设置父盒子到屏幕的距离，方便观察； 过渡 用于设置元素从一个状态到另一个状态的变化方式，通常配合hover使用； transition: all 1s linear 0s; all：参与过渡的属性； 1s：过渡持续时间； linear: 过渡方式，还有ease，贝塞尔曲线等； 0s：延迟时间，s不可以省略； 动画 先定义元素在动画过程中的每一帧的状态，然后再使用动画，并设置相关参数。 通常与变形属性配合使用； 与过渡不同的是，动画可以永不停息； 定义动画@-webkit-keyframes 动画名称 {0% {}50% {}100% {}} 调用动画-webkit-animation: donghua 1s linear 0s infinite alternative forwards; donghua: 动画名称； 1s： 持续时间； linear： 运动方式； 0s： 延时时间； infinite： 运动次数； alternative： 是否往返运动； forwards： 是否停留在最后一帧； 2D火箭动画：https://github.com/ChenXiaoliang2018/odds-and-ends/blob/master/%E7%81%AB%E7%AE%AD%E5%8A%A8%E7%94%BB.html 3D立方体动画：https://github.com/ChenXiaoliang2018/odds-and-ends/blob/master/旋转立方体.html]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css2.0技巧总结]]></title>
    <url>%2F2018%2F12%2F25%2Fcss2.0%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[logo的写法原理 将公司名称放在h1标签内，有助于SEO； 先利用缩进移出公司名称，再利用溢出隐藏来隐藏文本； 写法 text-indent: -999em; overflow: hidden; 精灵图的使用介绍 将一个项目的小icon制作到一张图上，这样再次访问这些图标时，可以从缓存中寻找，而不用再向服务器请求； 原理 通常利用padding，也可以利用空标签，伪元素给icon留好位置，再引入图片，然后调整背景图位置来让icon正确的显示； 写法 background: url(xx.jpg) -20px 20px; 单行文本截取原理 先将段落设置为不换行，然后设置溢出隐藏，最后将超出部分设置为省略号； 写法 white-space: nowrap; overflow: hidden; text-overflow: ellipsis; 多行文本截取原理 先将容器设置为弹性盒，再设置内容排列方向，设置显示行数，然后设置溢出隐藏，最后设置超出部分为省略号； 写法 display: -webkit- box; -webkit- box-orient: vertical; -webkit- line-clamp: 行数； overflow: hidden; text-overflow: ellipsis; 蒙板的实现原理 利用filter: blur(20px)属性来实现模糊效果，但该模糊效果会模糊当前元素上的所有内容，于是通过给当前元素添加一个一样大小的背景元素（毛玻璃板），在该元素上添加同样的背景图，再利用background-attachment: fixed相对于浏览器窗口位置不变的特性与大背景互相咬合，这样就实现了仿佛透过一层毛玻璃观看大背景的效果，也就是蒙板。 毛玻璃效果：http://www.cnblogs.com/ghost-xyx/p/5677168.html 蒙板demo：https://github.com/ChenXiaoliang2018/odds-and-ends/blob/master/%E8%92%99%E6%9D%BF.html]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css2.0知识总结]]></title>
    <url>%2F2018%2F12%2F23%2Fcss2.0%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[常用选择器基础选择器 通配符选择器 标签选择器 类选择器 id选择器 注：权重之间为256进制 高级选择器 后代选择器（空格） 交集选择器（紧密） 并集选择器（逗号） 常用属性 font-style: normal, italic font-weight: normal, bold （默认为400，加粗为700） font-size: 14px （chrom浏览器默认字体为14px） font-family: ‘Arial’, ‘Microsoft YaHei’ （设置字体为Consolas可将大于号开口变大） text-decoration: none, underline （清除默认样式时设置给a标签） text-indent: 2em （em相对父盒子字号倍数，rem相对于根元素html字号倍数） text-align: center （是水平方向而不是垂直方向） background-color: rgba(0,0,0,.5) background-image: images/1.jpg background-repeat: repeat, no-repeat background-attachment: scroll, fixed 注：复合属性最好写在一起 元素分类及特点块级元素 独占一行 可以设置宽高 不设置宽度，自动撑满父盒子宽度 如div，p，ul，li行内元素 并排显示 不可以设置宽高 大小由内容撑开 如a，img，span 浮动适用情况：即想要并排显示又想要设置宽高时。 清浮动的两种有效方法： overflow: hidden 内墙法：div::after{ content:&quot;&quot;; clear:both; display: block; } 注：同级元素要浮动都浮动 定位适用情况：涉及到压盖效果时。 相对定位 不脱标 单独使用，相对自身本来的位置定位。 父子盒模型时，作为绝对定位的参考元素（子绝父相） 绝对定位 脱标 单独使用时，绝对定位属性值与top有关时，相对于页面左上，右上顶点定位，与bottom有关时，相对于首屏左下，右下顶点定位 父子盒模型时，相对于距离自身最近的带有定位的祖先元素。 固定定位 脱标 相对于浏览器窗口顶点定位，适用于返回顶部，弹窗的书写 注： z-index用于确定压盖顺序，默认为0，适用于有定位的元素。 关于marginmargin垂直方向上的塌陷 解决方法：提前计算好 不能用儿子去踹父亲 解决方法：父子盒模型之间的间距最好给父盒子添加padding 关于插入图与背景图的使用 语义上的区别，插入图是占据大小的一个容器，而背景图只是一层背景； 插入图可以设置宽高，图片也可以撑开img元素， 而背景图不可以撑开容器，可以通过background-size来设置背景图的大小； 关于居中 text-align: center; 设置该属性的元素内部的文本或文本级标签，如span会水平居中显示； margin: 0 auto; 在标准文档流里，设置该属性的容器会在父容器内部水平居中并贴顶； position: absolute;left: 50%;margin-left: -盒子宽度一半； 因为脱标，margin: 0 auto失效，适用于绝对定位元素的水平居中与垂直居中； position: absolute;left: 50%;transform: translateX(-50%); 同上，只不过百分率免去了计算，更加简便； opacity:0与display: none区别： opacity: 0只是将将该元素变成透明，该元素仍然存在，仍然可以添加事件等，而display:none则是将该元素从节点树上移除，也就不能再对该元素继续操作了。 项目链接：https://github.com/ChenXiaoliang2018/boyaa]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于DTD]]></title>
    <url>%2F2018%2F12%2F01%2F%E5%85%B3%E4%BA%8EDTD%2F</url>
    <content type="text"><![CDATA[DTD的作用DTD(document type definition): 文档类型声明，在html中规定了浏览器按照何种模式渲染html文件。 渲染模式由于历史原因，各个浏览器对于html文件有不同的渲染模式，甚至同一浏览器的不同版本也有不同，后来W3C组织制定了标准模式，对于老旧的网页通过定义特殊的文档头声明来渲染，而目前及未来的网页大部分将遵循标准模式来渲染。 模式介绍 标准模式（standards mode）： 也叫严格模式（strict mode），即w3c制定的模式。 怪异模式（quirks mode）： 也叫兼容模式（compatibility mode），过渡模式（transitional mode），适用于兼容版本比较早的ie浏览器。 如何判断浏览器渲染模式输入alert(window.top.document.compatMode),提示backcompat为怪异模式，提示css1compat为标准模式。 详细介绍：https://www.cnblogs.com/ifonly/p/3312201.html 模式查询：https://hsivonen.fi/doctype/]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>知识</tag>
      </tags>
  </entry>
</search>
